---
- name: Tevbox Setup
  hosts: all
  # become: true
  # become_user: root
  gather_facts: true
  vars:
    username: "{{ undef(hint='You must specify a username') }}"
    fqdn: "{{ undef(hint='You must specify the FQDN for this server') }}"
    password: "{{ undef(hint='You must specify a password') }}"
    ssh_port: "22"
  tasks:
    # Note: we create this user at the very beginning to ensure we could log into the machine if something fails during the rest of the bootstrap process
    - name: Create admin user (sudo-based)
      ansible.builtin.user:
        name: "{{ username }}"
        comment: "{{ username }}"
        shell: /usr/bin/bash
        home: "/home/{{ username }}"
        groups: sudo
        password: "{{ password | password_hash('sha512', 'salt') }}"
      when: ansible_distribution != 'Rocky'
    - name: Create admin user (wheel-based)
      ansible.builtin.user:
        name: "{{ username }}"
        comment: "{{ username }}"
        shell: /usr/bin/bash
        home: "/home/{{ username }}"
        groups: wheel
        password: "{{ password | password_hash('sha512', 'salt') }}"
      when: ansible_distribution == 'Rocky'
    - name: Set authorized keys from Github for user
      ansible.posix.authorized_key:
        user: "{{ username }}"
        key: '{{ lookup(''url'', "https://github.com/{{ username }}.keys", split_lines=False) }}'
    - name: Allow passwordless sudo
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^%{{ item }}"
        line: "%{{ item }} ALL=(ALL) NOPASSWD: ALL"
        validate: "visudo -cf %s"
      with_items:
        - wheel
        - sudo
    - name: Configure sshd
      ansible.builtin.lineinfile:
        path: "/etc/ssh/sshd_config"
        regex: "^(#)?{{ item.key }}"
        line: "{{ item.key }} {{ item.value }}"
        state: present
      loop:
        - { key: "PermitRootLogin", value: "yes" }
        - { key: "PasswordAuthentication", value: "yes" }
        - { key: "PermitEmptyPasswords", value: "no" }
        - { key: "X11Forwarding", value: "no" }
        - { key: "Port", value: "{{ ssh_port }}" }
      notify: "Restart sshd"
    - name: Upgrade all packages (DNF)
      ansible.builtin.dnf:
        name: "*"
        state: latest
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky'
    - name: Upgrade all packages (APT)
      ansible.builtin.apt:
        upgrade: true
        update_cache: true
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: Install generic tools (APT)
      ansible.builtin.package:
        name:
          - jq
          - vim
          - git
          - ufw
          - wget
          - curl
          - dnsutils
          - hcloud-cli
        state: latest
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: Install generic tools (DNF)
      ansible.builtin.dnf:
        name:
        - epel-release
        - tar
        - ufw
        state: latest
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky'
    - name: Enable net.ipv4.ip_forward
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        sysctl_set: true
        state: present
        reload: true
    - name: Enable net.ipv6.conf.all.forwarding
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.forwarding
        value: "1"
        sysctl_set: true
        state: present
        reload: true
    - name: Default deny incoming traffic
      community.general.ufw:
        direction: incoming
        default: deny
    - name: Default allow outgoing traffic
      community.general.ufw:
        direction: outgoing
        default: allow
    - name: Allow all tailnet communication
      community.general.ufw:
        rule: allow
        interface: tailscale0
        direction: in
    - name: Allow public SSH access
      community.general.ufw:
        rule: allow
        port: "{{ ssh_port }}"
    - name: Allow https access
      community.general.ufw:
        rule: allow
        port: 443
    - name: UFW firewall enbaled
      community.general.ufw:
        state: enabled
    - name: Download code-server install script
      ansible.builtin.get_url:
        url: https://code-server.dev/install.sh
        dest: "/home/{{ username }}/code-server-install.sh"
        owner: "{{ username }}"
        mode: "0700"
    - name: Install code-server
      become: true
      become_user: "{{ username }}"
      ansible.builtin.command: sh -c "/home/{{ username }}/code-server-install.sh"
    - name: Start code-server
      ansible.builtin.systemd:
        name: "code-server@{{ username }}"
        state: started
        enabled: true
    - name: Wait for port 8080 to become open on the host, don't start checking for 10 seconds
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: 8080
        delay: 3
    - name: Set code-server config
      ansible.builtin.copy:
        dest: "/home/{{ username }}/.config/code-server/config.yaml"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: '0644'
        content: |
          bind-addr: 127.0.0.1:65000
          auth: password
          password: "{{ password }}"
          cert: false
    - name: Restart code-server (to apply config)
      ansible.builtin.systemd:
        name: "code-server@{{ username }}"
        state: restarted
        enabled: true
    - name: Disable code-server authentication (if password is empty)
      ansible.builtin.lineinfile:
        path: "/home/{{ username }}/.config/code-server/config.yaml"
        regex: "^auth"
        line: "auth: none"
      when: password == ""
      notify: "Restart code-server"
    - name: Install code-server extensions
      become: yes
      become_user: "{{ username }}"
      ansible.builtin.command: code-server --install-extension {{ item }}
      with_items:
        - redhat.vscode-yaml
        - vscodevim.vim
        - golang.Go
        - hashicorp.terraform
    - name: Get Caddy Deb Repo GPG Key
      ansible.builtin.get_url:
        url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
        dest: /usr/share/keyrings/caddy-stable-archive-keyring.asc
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: Add Caddy APT repo
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/caddy-stable-archive-keyring.asc] https://dl.cloudsmith.io/public/caddy/stable/deb/debian any-version main"
        state: present
        filename: caddy-stable.list
        update_cache: yes
        mode: 0644
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: Install caddy
      ansible.builtin.package:
        name: caddy
        state: latest
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: Configure Caddy
      ansible.builtin.copy:
        dest: "/etc/caddy/Caddyfile"
        content: |
          {{ fqdn }} {
            reverse_proxy 127.0.0.1:65000
          }
      notify: "Restart caddy"
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: Get chezmoi install script
      ansible.builtin.get_url:
        url: https://get.chezmoi.io
        dest: "/root/chezmoi-install.sh"
        mode: "0700"
    - name: Install chezmoi
      environment:
        BINDIR: /usr/local/bin/
      ansible.builtin.script: /root/chezmoi-install.sh
    - name: Run chezmoi
      become: true
      become_user: "{{ username }}"
      ansible.builtin.script: "/usr/local/bin/chezmoi init --apply {{ username }}"
      failed_when: false # since this could likely fail, we always accept it as is
    - name: Create code directory
      ansible.builtin.file:
        path: "/home/{{ username}}/code"
        state: directory
        mode: '0750'
        owner: "{{ username }}"
        group: "{{ username }}"
  handlers:
    - name: Restart code-server
      ansible.builtin.service:
        name: "code-server@{{ username }}"
        state: restarted
    - name: Restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted
    - name: Restart caddy
      ansible.builtin.service:
        name: caddy
        state: restarted
