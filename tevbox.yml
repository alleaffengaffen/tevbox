---
- name: Tevbox Setup
  hosts: all
  # become: true
  # become_user: root # cloud-init is already executed as root
  gather_facts: false # increases speed + not needed currently
  vars:
    username: "{{ undef(hint='You must specify a username') }}"
    fqdn: "{{ undef(hint='You must specify the FQDN for this server') }}"
    dns_token: "{{ undef(hint='You must specify a DNS Token for Hetzner DNS') }}"
  tasks:
    - name: SSHD is disabled and masked
      ansible.builtin.systemd:
        state: stopped
        name: ssh
        enabled: false
        masked: true
    - name: Upgrade all packages 
      ansible.builtin.apt:
        upgrade: true
        update_cache: true
    - name: Install generic tools 
      ansible.builtin.apt:
        name:
          - jq
          - vim
          - git
          - ufw
          - wget
          - curl
          - dnsutils
          - hcloud-cli
        state: present
    - name: Caddy GPG key is present
      ansible.builtin.get_url:
        url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
        dest: /usr/share/keyrings/caddy-stable-archive-keyring.asc
    - name: Caddy APT repo is present
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/caddy-stable-archive-keyring.asc] https://dl.cloudsmith.io/public/caddy/stable/deb/debian any-version main"
        state: present
        filename: caddy-stable.list
        update_cache: yes
        mode: 0644
    - name: Install caddy
      ansible.builtin.apt:
        name: caddy=2.7.6
        state: present
    - name: Configure Caddy
      ansible.builtin.copy:
        dest: "/etc/caddy/Caddyfile"
        content: |
          {{ fqdn }} {
            reverse_proxy 127.0.0.1:65000
          }
          *.{{ fqdn }} {
            reverse_proxy 127.0.0.1:65000
          }
      notify: "Restart caddy"
    - name: admin user created
      ansible.builtin.user:
        name: "{{ username }}"
        comment: "{{ username }}"
        shell: /usr/bin/bash
        home: "/home/{{ username }}"
        groups: sudo
        password_lock: true
    - name: passwordless sudo is possible
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^%sudo"
        line: "%{{ item }} ALL=(ALL) NOPASSWD: ALL"
        validate: "visudo -cf %s"
    - name: Download code-server install script
      ansible.builtin.get_url:
        url: https://code-server.dev/install.sh
        dest: "/tmp/code-server-install.sh"
        mode: "0777"
    - name: Install code-server
      ansible.builtin.command: sh -c "/tmp/code-server-install.sh"
    - name: Start code-server
      ansible.builtin.systemd:
        name: "code-server@{{ username }}"
        state: started
        enabled: true
    - name: Wait for port 8080 to become open on the host, don't start checking for 3 seconds
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: 8080
        delay: 3
    - name: Set code-server config
      ansible.builtin.copy:
        dest: "/home/{{ username }}/.config/code-server/config.yaml"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: '0644'
        content: |
          bind-addr: 127.0.0.1:65000
          auth: none # done by caddy
          cert: false
          proxy-domain: {{ fqdn }}
    - name: Restart code-server (to apply config)
      ansible.builtin.systemd:
        name: "code-server@{{ username }}"
        state: restarted
    - name: Install code-server extensions
      become: yes
      become_user: "{{ username }}"
      ansible.builtin.command: code-server --install-extension {{ item }}
      with_items:
        - redhat.vscode-yaml
        - vscodevim.vim
        - golang.Go
        - hashicorp.terraform
        - ms-kubernetes-tools.vscode-kubernetes-tools
        - ms-azuretools.vscode-docker
    - name: Create code directory
      ansible.builtin.file:
        path: "/home/{{ username}}/code"
        state: directory
        mode: '0750'
        owner: "{{ username }}"
        group: "{{ username }}"
    - name: Get chezmoi install script
      ansible.builtin.get_url:
        url: https://get.chezmoi.io
        dest: "/root/chezmoi-install.sh"
        mode: "0700"
    - name: Install chezmoi
      environment:
        BINDIR: /usr/local/bin/
      ansible.builtin.script: /root/chezmoi-install.sh
    - name: Run chezmoi
      become: true
      become_user: "{{ username }}"
      ansible.builtin.script: "/usr/local/bin/chezmoi init --apply {{ username }}"
      failed_when: false # since this could likely fail, we always accept it as is
  handlers:
    - name: Restart code-server
      ansible.builtin.service:
        name: "code-server@{{ username }}"
        state: restarted
    - name: Restart caddy
      ansible.builtin.service:
        name: caddy
        state: restarted
