name: Hcloud box

on:
  workflow_dispatch:
    inputs:
      hostname:
        type: string
        required: true
        description: Hostname of the box
      action:
        type: choice
        description: What to do with the box?
        default: "create"
        options:
          - "create"
          - "destroy"
      password:
        type: string
        description: Password for the code-server
      type:
        type: choice
        default: cax11
        options:
          - cx11
          - cpx11
          - cx21
          - cpx21
          - cx31
          - cpx31
          - cx41
          - cpx41
          - cx51
          - cpx51
          - cax11
          - cax21
          - cax31
          - cax41
        description: Size of the box to create (cax=arm64)
      location:
        type: choice
        default: hel1
        options:
          - hel1
          - fsn1
          - nbg1
          - ash
          - hil
        description: Location of the box

jobs:
  terraform:
    name: "tevbox..."
    runs-on: ubuntu-latest
    env:
      STATE_BUCKET: "ghtevbox"
      S3_ENDPOINT: "fsn1.your-objectstorage.com"
      S3_REGION: "fsn1"
      TAILNET: "the-technat.github"
      AWS_ACCESS_KEY_ID: ${{ secrets.HCLOUD_S3_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.HCLOUD_S3_SECRET_KEY }}
      TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
      TF_VAR_hetzner_dns_token: ${{ secrets.HETZNER_DNS_TOKEN }}
      TF_VAR_tailscale_api_key: ${{ secrets.TAILSCALE_API_KEY }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: set up S3cmd cli tool
        uses: s3-actions/s3cmd@v1.8.0
        with:
          provider: aws
          access_key: ${{ secrets.HCLOUD_S3_ACCESS_KEY }}
          secret_key: ${{ secrets.HCLOUD_S3_SECRET_KEY }}
      - name: adjust s3cmd config for hcloud
        run: sed -i 's/s3\.amazonaws\.com/${{ env.S3_ENDPOINT }}/g' ~/.s3cfg
      - name: create Terraform backend configuration
        run: |
          tee hcloud/s3.tfbackend << END
            key    = "${{ github.event.inputs.hostname }}"
            bucket = "${{ env.STATE_BUCKET }}"
            region = "${{ env.S3_REGION }}"
            skip_region_validation = true
            skip_requesting_account_id = true
            skip_s3_checksum = true
            skip_credentials_validation = true
            endpoints = {
              s3 = "https://${{ env.S3_ENDPOINT }}"  
            }
          END
      - name: create variables file
        if: ${{ github.event.inputs.action == 'create' }}
        run: |
          tee hcloud/${{ github.event.inputs.hostname }}.tfvars << END
            hostname   = "${{ github.event.inputs.hostname }}"
            password   = "${{ github.event.inputs.password }}"
            type       = "${{ github.event.inputs.type }}"
            location   = "${{ github.event.inputs.location }}"
            revision   = "${GITHUB_REF##*/}"
            username   = "${{ github.actor }}"
          END
      - name: save variables file to s3
        if: ${{ github.event.inputs.action == 'create' }}
        run: s3cmd put hcloud/${{ github.event.inputs.hostname }}.tfvars s3://${{ env.STATE_BUCKET }}/${{ github.event.inputs.hostname}}.tfvars
      - name: grab variables file from s3
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: s3cmd get s3://${{ env.STATE_BUCKET }}/${{ github.event.inputs.hostname}}.tfvars hcloud/${{ github.event.inputs.hostname }}.tfvars
      - name: setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: terraform init
        id: init
        run: terraform -chdir=hcloud init -backend-config=s3.tfbackend
      - name: terraform apply
        if: ${{ github.event.inputs.action == 'create' }}
        run: terraform -chdir=hcloud apply -auto-approve -input=false -var-file ${{ github.event.inputs.hostname }}.tfvars
      - name: terraform destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform -chdir=hcloud destroy -auto-approve -input=false -var-file ${{ github.event.inputs.hostname }}.tfvars
      - name: delete state
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: s3cmd del s3://${{ env.STATE_BUCKET }}/${{ github.event.inputs.hostname }}
      - name: delete machine from tailnet
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          id=$(curl --fail-with-body -sSL -H "Authorization: Bearer ${{ secrets.TAILSCALE_API_KEY }}" \
            https://api.tailscale.com/api/v2/tailnet/${{ env.TAILNET }}/devices \
            | jq -r ".[] | .[] | select(.name | contains(\"${{ github.event.inputs.hostname }}\")) | .id" | tr -d "\"")

          curl --fail-with-boxy -sSL -X DELETE -H "Authorization: Bearer ${{ secrets.TAILSCALE_API_KEY }}" https://api.tailscale.com/api/v2/device/$id
      - name: terraform output
        run: |
          terraform -chdir=hcloud output > $GITHUB_STEP_SUMMARY
