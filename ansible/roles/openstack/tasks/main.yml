---
- name: Get info about floating ips
  register: fips
  openstack.cloud.floating_ip_info:
    auth:
      auth_url: "{{ openstack_auth_url }}"
      username: "{{ openstack_username }}"
      password: "{{openstack_password}}"
      project_name: "{{ openstack_project_name }}"
# Docs: https://docs.ansible.com/ansible/latest/collections/openstack/cloud/server_module.html
# - name: Create a new instance with metadata and attaches it to a network
#   local_action:
#     module: openstack.cloud.server
#     state: present
#     auth:
#       auth_url: "{{ openstack_auth_url }}"
#       username: "{{ openstack_username }}"
#       password: "{{openstack_password}}"
#       project_name: "{{ openstack_project_name }}"
#     name: vm1
#     image: 4f905f38-e52a-43d2-b6ec-754a13ffb529
#     key_name: ansible_key
#     timeout: 200
#     flavor: 4
#     nics:
#       - net-id: 34605f38-e52a-25d2-b6ec-754a13ffb723
#       - net-name: another_network
#     meta:
#       hostname: test1
#       group: uge_master
# - name: Update package index
#   apt:
#     update_cache: yes
# - name: Ensure base packages are installed
#   apt:
#     name:
#       - zip
#       - unzip
#       - curl
#       - software-properties-common
#       - apt-transport-https
#       - ufw
#       - bash-completion
#       - vim
#       - git
#       - lvm2
#       - parted
#       - python3-pip
#       - gpg
#       - gpg-agent
#     state: latest
# - name: Default deny incoming traffic
#   ufw:
#     direction: incoming
#     default: deny
# - name: Default allow outgoing traffic
#   ufw:
#     direction: outgoing
#     default: allow
# - name: Allow incoming HTTP traffic
#   ufw:
#     rule: allow
#     port: "{{ http_port }}"
# - name: Allow incoming HTTPS traffic
#   ufw:
#     rule: allow
#     port: "{{ https_port }}"
# - name: Allow incoming SSH traffic
#   ufw:
#     rule: allow
#     port: "{{ ansible_port }}"
# - name: UFW firewall enabled
#   community.general.ufw:
#     state: enabled
# - name: Get data disk by size
#   set_fact:
#     data_disk: "/dev/{{ item.key }}"
#   when:
#     - item.value.vendor == "HC"
#   with_dict: "{{ ansible_devices }}"
# - name: Data disk partitioned
#   parted:
#     device: "{{ data_disk }}"
#     number: 1
#     flags: [lvm]
#     state: present
# - name: VG nc created
#   lvg:
#     vg: nc
#     pvs: ["{{ data_disk }}1"]
#     pesize: "{{ pesize }}"
# - name: LV /dev/nc/data created
#   lvol:
#     vg: nc
#     lv: data
#     size: 100%FREE
#     force: yes
# - name: Mount directory exists
#   file:
#     path: /data
#     state: directory
#     mode: "0770"
# - name: LV formated with ext4
#   filesystem:
#     fstype: ext4
#     dev: /dev/nc/data
# - name: LV mounted at /data
#   mount:
#     path: "{{ data_dir }}"
#     src: /dev/nc/data
#     fstype: ext4
#     state: mounted
# - name: Ensure Timezone is UTC+00:00
#   timezone:
#     name: "Australia/Currie" # UTC+00:00
#     hwclock: "UTC"
